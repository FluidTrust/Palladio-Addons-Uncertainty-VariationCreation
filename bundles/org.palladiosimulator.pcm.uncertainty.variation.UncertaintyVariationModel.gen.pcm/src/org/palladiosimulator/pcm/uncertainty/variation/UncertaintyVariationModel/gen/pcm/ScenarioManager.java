package org.palladiosimulator.pcm.uncertainty.variation.UncertaintyVariationModel.gen.pcm;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.uncertainty.variation.UncertaintyVariationModel.gen.pcm.statespace.Statespace;
import org.palladiosimulator.pcm.uncertainty.variation.UncertaintyVariationModel.gen.pcm.statespace.StatespaceIterator;

/**
 * Scenario Manager defines the abstraction layer for managing scenarios
 */
public interface ScenarioManager {

    /**
     * generates variant i from the base models by copying the files into configuration_i
     * subdirectory of the scenario folder of the current project.
     *
     * @param idx
     *            specifies the id number of the current variant
     * @param progressMonitor
     *            progress monitor for status reporting
     * @throws CoreException
     *             if existing configuration cannot be deleted or new configuration cannot be
     *             generated
     */
    void createCurrVariant(int idx, IProgressMonitor progressMonitor) throws CoreException;

    /**
     * registers the known varying model types of the pcm for later loading.
     *
     * @param knownVariingModelTypes
     *            specifies a list with the names of the known model that should be varied.
     */
    void register(List<String> knownVariingModelTypes);

    /**
     * loads and returns the different pcm models that must be varied of the current variant. This
     * function requires a single call of the function register and a call of the function
     * createCurrVariant.
     *
     * @return a map between model type as string and loaded models of this type
     * @throws CoreException
     *             if the result directory or its content can not be reached
     */
    Map<String, List<EObject>> loadCurrVariantModels() throws CoreException;

    /**
     * store the pcm models that were loaded with the function loadCurrVariantModels.
     *
     * @param models
     *            specifies the models that shall be stored
     * @throws IOException
     *             if writing of one of the models fails
     */
    void storeCurrVariantModels(Map<String, List<EObject>> models) throws IOException;

    /**
     * returns the uri of the current variant generated by the function createCurrVariant.
     *
     * return the platform uri to the current variant.
     */
    URI getCurrVariantUri();

    /**
     * writes the different variation points into the reports
     *
     * @param statespace
     *            the statespace to report
     * @param progressMonitor
     *            progress monitor for status reporting
     * @throws CoreException
     *             if the writing into the report fails
     */
    void reportsVariationPoints(final Statespace statespace, final IProgressMonitor progressMonitor)
            throws CoreException;

    /**
     * writes the current state of the statespace iterator into the reports
     *
     * @param it
     *            the StatespaceIterator to report
     * @param progressMonitor
     *            progress monitor for status reporting
     * @throws CoreException
     *             if the writing into the report fails
     */
    void reportVariation(final StatespaceIterator it, final IProgressMonitor progressMonitor) throws CoreException;

}